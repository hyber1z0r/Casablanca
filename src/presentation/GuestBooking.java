/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import domain.Controller;
import domain.Facility_Booking;
import domain.Fbooking;
import domain.Fbooking_Guests;
import domain.Guest;
import domain.GuestDates;
import domain.Instructor;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.ButtonModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Filipovic
 */
public class GuestBooking extends javax.swing.JFrame
{

    /**
     * Creates new form GuestBooking
     */
    Controller con;
    private Guest guestLoggedIn;
    private int facilityID;

    public GuestBooking()
    {
        initComponents();
        con = Controller.getInstance();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        LOGIN = new javax.swing.JPanel();
        GUESTUSERNAME = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        GUESTFEEDBACK = new javax.swing.JLabel();
        GUESTLOGIN = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        GUESTPASSWORD = new javax.swing.JPasswordField();
        WELCOME = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        BOOKFACILITYBUTTON = new javax.swing.JButton();
        CHECKBOOKINGBUTTON = new javax.swing.JButton();
        LOGOUTBUTTON = new javax.swing.JButton();
        BOOKFACILITY = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        VOLLEYBALL = new javax.swing.JButton();
        BADMINTON = new javax.swing.JButton();
        TENNIS = new javax.swing.JButton();
        GOLF = new javax.swing.JButton();
        HANDBALL = new javax.swing.JButton();
        SWIMMING = new javax.swing.JButton();
        FITNESS = new javax.swing.JButton();
        BOOKFACILITYBACKBUTTON = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        SHOWTIMEANDDATE = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        SHOWDATECOMBOBOX = new javax.swing.JComboBox();
        SHOWTIMEDATEBOOKBUTTON = new javax.swing.JButton();
        CHOOSECOURTCOMBO = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        BookTable = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        SHOWTIMESearch = new javax.swing.JButton();
        SHOWTIMEBACK = new javax.swing.JButton();
        InstructorCheckbox = new javax.swing.JCheckBox();
        YOUARENOWBOOKEDIN = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        THANKYOUBUTTON = new javax.swing.JButton();
        DELETEBOOKING = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        DELETEBOOKINGBACKBUTTON = new javax.swing.JButton();
        DELETEBOOKINGBUTTON = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        CheckBookingsTable = new javax.swing.JTable();
        Deletebookingfeedback = new javax.swing.JLabel();

        jLabel8.setText("INSTRUCTOR IS AVAILABLE");

        jLabel10.setText("INSTRUCTOR IS AVAILABLE");

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        GUESTUSERNAME.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GUESTUSERNAMEActionPerformed(evt);
            }
        });

        jLabel1.setText("USERNAME");

        jLabel2.setText("PASSWORD");

        GUESTFEEDBACK.setForeground(new java.awt.Color(255, 0, 0));

        GUESTLOGIN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        GUESTLOGIN.setForeground(new java.awt.Color(102, 102, 0));
        GUESTLOGIN.setText("LOGIN");
        GUESTLOGIN.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GUESTLOGINActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Aparajita", 2, 48)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 0));
        jLabel5.setText("PLEASE LOGIN AS A GUEST");

        GUESTPASSWORD.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GUESTPASSWORDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LOGINLayout = new javax.swing.GroupLayout(LOGIN);
        LOGIN.setLayout(LOGINLayout);
        LOGINLayout.setHorizontalGroup(
            LOGINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LOGINLayout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
            .addGroup(LOGINLayout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addGroup(LOGINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(38, 38, 38)
                .addGroup(LOGINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GUESTLOGIN, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GUESTUSERNAME, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(LOGINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(GUESTPASSWORD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addComponent(GUESTFEEDBACK, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LOGINLayout.setVerticalGroup(
            LOGINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LOGINLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addGroup(LOGINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GUESTUSERNAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(28, 28, 28)
                .addGroup(LOGINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(GUESTPASSWORD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(GUESTFEEDBACK, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GUESTLOGIN, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        getContentPane().add(LOGIN, "card2");

        jLabel6.setFont(new java.awt.Font("Aparajita", 2, 48)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("WELCOME");

        BOOKFACILITYBUTTON.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BOOKFACILITYBUTTON.setForeground(new java.awt.Color(102, 102, 0));
        BOOKFACILITYBUTTON.setText("BOOK FACILITY");
        BOOKFACILITYBUTTON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BOOKFACILITYBUTTONActionPerformed(evt);
            }
        });

        CHECKBOOKINGBUTTON.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CHECKBOOKINGBUTTON.setForeground(new java.awt.Color(102, 102, 0));
        CHECKBOOKINGBUTTON.setText("CHECK BOOKINGS");
        CHECKBOOKINGBUTTON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CHECKBOOKINGBUTTONActionPerformed(evt);
            }
        });

        LOGOUTBUTTON.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        LOGOUTBUTTON.setForeground(new java.awt.Color(102, 102, 0));
        LOGOUTBUTTON.setText("LOGOUT");
        LOGOUTBUTTON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LOGOUTBUTTONActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout WELCOMELayout = new javax.swing.GroupLayout(WELCOME);
        WELCOME.setLayout(WELCOMELayout);
        WELCOMELayout.setHorizontalGroup(
            WELCOMELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WELCOMELayout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addGroup(WELCOMELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CHECKBOOKINGBUTTON, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BOOKFACILITYBUTTON, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 221, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WELCOMELayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LOGOUTBUTTON)
                .addGap(33, 33, 33))
            .addGroup(WELCOMELayout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(171, Short.MAX_VALUE))
        );
        WELCOMELayout.setVerticalGroup(
            WELCOMELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WELCOMELayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(28, 28, 28)
                .addComponent(BOOKFACILITYBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(CHECKBOOKINGBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(LOGOUTBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        getContentPane().add(WELCOME, "card3");

        jLabel7.setFont(new java.awt.Font("AngsanaUPC", 0, 48)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("CHOOSE FACILITY");

        VOLLEYBALL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        VOLLEYBALL.setForeground(new java.awt.Color(102, 102, 0));
        VOLLEYBALL.setText("VOLLEYBALL");
        VOLLEYBALL.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                VOLLEYBALLActionPerformed(evt);
            }
        });

        BADMINTON.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BADMINTON.setForeground(new java.awt.Color(102, 102, 0));
        BADMINTON.setText("BADMINTON");
        BADMINTON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BADMINTONActionPerformed(evt);
            }
        });

        TENNIS.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        TENNIS.setForeground(new java.awt.Color(102, 102, 0));
        TENNIS.setText("TENNIS");
        TENNIS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                TENNISActionPerformed(evt);
            }
        });

        GOLF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        GOLF.setForeground(new java.awt.Color(102, 102, 0));
        GOLF.setText("GOLF");
        GOLF.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GOLFActionPerformed(evt);
            }
        });

        HANDBALL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HANDBALL.setForeground(new java.awt.Color(102, 102, 0));
        HANDBALL.setText("HANDBALL");
        HANDBALL.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HANDBALLActionPerformed(evt);
            }
        });

        SWIMMING.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SWIMMING.setForeground(new java.awt.Color(102, 102, 0));
        SWIMMING.setText("SWIMMING");
        SWIMMING.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SWIMMINGActionPerformed(evt);
            }
        });

        FITNESS.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        FITNESS.setForeground(new java.awt.Color(102, 102, 0));
        FITNESS.setText("FITNESS");
        FITNESS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                FITNESSActionPerformed(evt);
            }
        });

        BOOKFACILITYBACKBUTTON.setText("BACK");
        BOOKFACILITYBACKBUTTON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BOOKFACILITYBACKBUTTONActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(102, 204, 0));
        jLabel4.setText("INSTRUCTOR IS AVAILABLE");

        jLabel9.setForeground(new java.awt.Color(102, 204, 0));
        jLabel9.setText("INSTRUCTOR IS AVAILABLE");

        jLabel11.setForeground(new java.awt.Color(102, 204, 0));
        jLabel11.setText("INSTRUCTOR IS AVAILABLE");

        jLabel12.setForeground(new java.awt.Color(51, 204, 0));
        jLabel12.setText("INSTRUCTOR IS AVAILABLE");

        javax.swing.GroupLayout BOOKFACILITYLayout = new javax.swing.GroupLayout(BOOKFACILITY);
        BOOKFACILITY.setLayout(BOOKFACILITYLayout);
        BOOKFACILITYLayout.setHorizontalGroup(
            BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BOOKFACILITYLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
            .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                        .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TENNIS, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel4)))
                        .addGap(35, 35, 35)
                        .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                                .addComponent(BADMINTON, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(FITNESS, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                                .addGap(210, 210, 210)
                                .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(HANDBALL, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(VOLLEYBALL, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel9)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                        .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(BOOKFACILITYBACKBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                                    .addComponent(GOLF, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BOOKFACILITYLayout.createSequentialGroup()
                                    .addGap(0, 2, Short.MAX_VALUE)
                                    .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(SWIMMING, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel12))
                                    .addGap(388, 388, 388))))
                        .addGap(65, 65, 65))))
        );
        BOOKFACILITYLayout.setVerticalGroup(
            BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BOOKFACILITYLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BADMINTON, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TENNIS, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FITNESS, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VOLLEYBALL, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GOLF, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(BOOKFACILITYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HANDBALL, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SWIMMING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(BOOKFACILITYBACKBUTTON, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );

        getContentPane().add(BOOKFACILITY, "card4");

        jLabel14.setFont(new java.awt.Font("Aparajita", 2, 36)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 0));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("PICK DATE AND TIME");

        SHOWDATECOMBOBOX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SHOWDATECOMBOBOX.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SHOWDATECOMBOBOXActionPerformed(evt);
            }
        });

        SHOWTIMEDATEBOOKBUTTON.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        SHOWTIMEDATEBOOKBUTTON.setForeground(new java.awt.Color(51, 255, 0));
        SHOWTIMEDATEBOOKBUTTON.setText("BOOK");
        SHOWTIMEDATEBOOKBUTTON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SHOWTIMEDATEBOOKBUTTONActionPerformed(evt);
            }
        });

        CHOOSECOURTCOMBO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CHOOSECOURTCOMBO.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CHOOSECOURTCOMBOActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose date");

        BookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        BookTable.getSelectionModel().addListSelectionListener(new ListSelectionListener()
            {
                @Override
                public void valueChanged(ListSelectionEvent event)
                {
                    if (BookTable.getSelectedRow() > -1)
                    {
                        // print first column value from selected row
                        //System.out.println(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
                        SHOWTIMEDATEBOOKBUTTON.setEnabled(true);
                    }
                }
            });
            jScrollPane2.setViewportView(BookTable);

            jLabel20.setText("Choose court");

            SHOWTIMESearch.setText("Search");
            SHOWTIMESearch.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    SHOWTIMESearchActionPerformed(evt);
                }
            });

            SHOWTIMEBACK.setText("Back");
            SHOWTIMEBACK.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    SHOWTIMEBACKActionPerformed(evt);
                }
            });

            InstructorCheckbox.setText("Instructor");
            InstructorCheckbox.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    InstructorCheckboxActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout SHOWTIMEANDDATELayout = new javax.swing.GroupLayout(SHOWTIMEANDDATE);
            SHOWTIMEANDDATE.setLayout(SHOWTIMEANDDATELayout);
            SHOWTIMEANDDATELayout.setHorizontalGroup(
                SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addGroup(SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                            .addGroup(SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(SHOWDATECOMBOBOX, 0, 124, Short.MAX_VALUE)
                                    .addComponent(CHOOSECOURTCOMBO, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel20)
                                .addComponent(SHOWTIMESearch)
                                .addComponent(InstructorCheckbox))
                            .addGap(31, 31, 31)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                            .addGroup(SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(SHOWTIMEDATEBOOKBUTTON, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SHOWTIMEBACK, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGap(28, 28, 28))
                        .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
            );
            SHOWTIMEANDDATELayout.setVerticalGroup(
                SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(jLabel3)
                            .addGroup(SHOWTIMEANDDATELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(SHOWDATECOMBOBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(24, 24, 24)
                                    .addComponent(jLabel20)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(CHOOSECOURTCOMBO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(26, 26, 26)
                                    .addComponent(InstructorCheckbox)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SHOWTIMESearch))
                                .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addComponent(SHOWTIMEBACK)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addGroup(SHOWTIMEANDDATELayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(13, 13, 13)
                    .addComponent(SHOWTIMEDATEBOOKBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(30, 30, 30))
            );

            getContentPane().add(SHOWTIMEANDDATE, "card6");

            jLabel15.setFont(new java.awt.Font("Aparajita", 2, 36)); // NOI18N
            jLabel15.setForeground(new java.awt.Color(102, 102, 0));
            jLabel15.setText("YOU ARE NOW BOOKED IN");

            jLabel16.setFont(new java.awt.Font("Aparajita", 2, 36)); // NOI18N
            jLabel16.setForeground(new java.awt.Color(102, 102, 0));
            jLabel16.setText("THANK YOU, HAVE A GOOD DAY");

            THANKYOUBUTTON.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
            THANKYOUBUTTON.setForeground(new java.awt.Color(51, 255, 0));
            THANKYOUBUTTON.setText("Go back");
            THANKYOUBUTTON.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    THANKYOUBUTTONActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout YOUARENOWBOOKEDINLayout = new javax.swing.GroupLayout(YOUARENOWBOOKEDIN);
            YOUARENOWBOOKEDIN.setLayout(YOUARENOWBOOKEDINLayout);
            YOUARENOWBOOKEDINLayout.setHorizontalGroup(
                YOUARENOWBOOKEDINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(YOUARENOWBOOKEDINLayout.createSequentialGroup()
                    .addGroup(YOUARENOWBOOKEDINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(YOUARENOWBOOKEDINLayout.createSequentialGroup()
                            .addGap(59, 59, 59)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(YOUARENOWBOOKEDINLayout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addComponent(jLabel16))
                        .addGroup(YOUARENOWBOOKEDINLayout.createSequentialGroup()
                            .addGap(231, 231, 231)
                            .addComponent(THANKYOUBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(103, Short.MAX_VALUE))
            );
            YOUARENOWBOOKEDINLayout.setVerticalGroup(
                YOUARENOWBOOKEDINLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(YOUARENOWBOOKEDINLayout.createSequentialGroup()
                    .addGap(72, 72, 72)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(45, 45, 45)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(THANKYOUBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(118, Short.MAX_VALUE))
            );

            getContentPane().add(YOUARENOWBOOKEDIN, "card7");

            jLabel17.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
            jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel17.setText("Here's a list of your bookings");

            DELETEBOOKINGBACKBUTTON.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
            DELETEBOOKINGBACKBUTTON.setForeground(new java.awt.Color(51, 255, 0));
            DELETEBOOKINGBACKBUTTON.setText("BACK");
            DELETEBOOKINGBACKBUTTON.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    DELETEBOOKINGBACKBUTTONActionPerformed(evt);
                }
            });

            DELETEBOOKINGBUTTON.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
            DELETEBOOKINGBUTTON.setForeground(new java.awt.Color(255, 51, 51));
            DELETEBOOKINGBUTTON.setText("DELETE");
            DELETEBOOKINGBUTTON.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    DELETEBOOKINGBUTTONActionPerformed(evt);
                }
            });

            CheckBookingsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][]
                {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String []
                {
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
            ));
            jScrollPane3.setViewportView(CheckBookingsTable);

            javax.swing.GroupLayout DELETEBOOKINGLayout = new javax.swing.GroupLayout(DELETEBOOKING);
            DELETEBOOKING.setLayout(DELETEBOOKINGLayout);
            DELETEBOOKINGLayout.setHorizontalGroup(
                DELETEBOOKINGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DELETEBOOKINGLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(DELETEBOOKINGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DELETEBOOKINGLayout.createSequentialGroup()
                            .addComponent(Deletebookingfeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(DELETEBOOKINGLayout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                            .addGroup(DELETEBOOKINGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(DELETEBOOKINGBACKBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DELETEBOOKINGBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(62, 62, 62))
                        .addGroup(DELETEBOOKINGLayout.createSequentialGroup()
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())))
            );
            DELETEBOOKINGLayout.setVerticalGroup(
                DELETEBOOKINGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DELETEBOOKINGLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(DELETEBOOKINGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DELETEBOOKINGLayout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addComponent(DELETEBOOKINGBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37)
                            .addComponent(DELETEBOOKINGBACKBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(DELETEBOOKINGLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18)
                    .addComponent(Deletebookingfeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(16, Short.MAX_VALUE))
            );

            getContentPane().add(DELETEBOOKING, "card8");

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void GUESTUSERNAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUESTUSERNAMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GUESTUSERNAMEActionPerformed

    private void BOOKFACILITYBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOOKFACILITYBUTTONActionPerformed
        BOOKFACILITY.setVisible(true);
        WELCOME.setVisible(false);
    }//GEN-LAST:event_BOOKFACILITYBUTTONActionPerformed

    private void CHECKBOOKINGBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CHECKBOOKINGBUTTONActionPerformed
        // check and delete your bookings
        ArrayList<Fbooking> fb;
        fb = con.getFbookings(guestLoggedIn.getGuest_id());
        if (!fb.isEmpty())
        {
            fillBookings(fb);
            WELCOME.setVisible(false);
            DELETEBOOKING.setVisible(true);
            Deletebookingfeedback.setText("");
        } else
        {
            // label say you have no bookings.
        }


    }//GEN-LAST:event_CHECKBOOKINGBUTTONActionPerformed

    private void LOGOUTBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOGOUTBUTTONActionPerformed
        guestLoggedIn = null;
        LOGIN.setVisible(true);
        WELCOME.setVisible(false);
        GUESTUSERNAME.requestFocusInWindow();
    }//GEN-LAST:event_LOGOUTBUTTONActionPerformed

    private void BOOKFACILITYBACKBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOOKFACILITYBACKBUTTONActionPerformed
        WELCOME.setVisible(true);
        BOOKFACILITY.setVisible(false);
    }//GEN-LAST:event_BOOKFACILITYBACKBUTTONActionPerformed

    private void FITNESSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FITNESSActionPerformed
        fillComboFitness();
        fillComboDates(guestLoggedIn.getGuest_id());
        SHOWTIMEANDDATE.setVisible(true);
        BOOKFACILITY.setVisible(false);
        initializeTableTimes();
        facilityID = 15;
        ButtonModel model2 = InstructorCheckbox.getModel();
        model2.setSelected(false);
        model2.setEnabled(false);
        SHOWTIMEDATEBOOKBUTTON.setEnabled(false);
    }//GEN-LAST:event_FITNESSActionPerformed

    private void SWIMMINGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SWIMMINGActionPerformed
        fillComboSwimming();
        fillComboDates(guestLoggedIn.getGuest_id());
        SHOWTIMEANDDATE.setVisible(true);
        BOOKFACILITY.setVisible(false);
        initializeTableTimes();
        facilityID = 14;
        ButtonModel model2 = InstructorCheckbox.getModel();
        model2.setSelected(false);
        model2.setEnabled(true);
        SHOWTIMEDATEBOOKBUTTON.setEnabled(false);
    }//GEN-LAST:event_SWIMMINGActionPerformed

    private void HANDBALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HANDBALLActionPerformed
        fillComboHandball();
        fillComboDates(guestLoggedIn.getGuest_id());
        SHOWTIMEANDDATE.setVisible(true);
        BOOKFACILITY.setVisible(false);
        initializeTableTimes();
        facilityID = 16;
        ButtonModel model2 = InstructorCheckbox.getModel();
        model2.setSelected(false);
        model2.setEnabled(false);
        SHOWTIMEDATEBOOKBUTTON.setEnabled(false);
    }//GEN-LAST:event_HANDBALLActionPerformed

    private void GOLFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GOLFActionPerformed
        fillComboGolf();
        fillComboDates(guestLoggedIn.getGuest_id());
        SHOWTIMEANDDATE.setVisible(true);
        BOOKFACILITY.setVisible(false);
        initializeTableTimes();
        facilityID = 9;
        ButtonModel model2 = InstructorCheckbox.getModel();
        model2.setSelected(false);
        model2.setEnabled(true);
        SHOWTIMEDATEBOOKBUTTON.setEnabled(false);
    }//GEN-LAST:event_GOLFActionPerformed

    private void TENNISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TENNISActionPerformed
        fillComboTennis();
        fillComboDates(guestLoggedIn.getGuest_id());
        SHOWTIMEANDDATE.setVisible(true);
        BOOKFACILITY.setVisible(false);
        initializeTableTimes();
        facilityID = 1;
        ButtonModel model2 = InstructorCheckbox.getModel();
        model2.setSelected(false);
        model2.setEnabled(true);
        SHOWTIMEDATEBOOKBUTTON.setEnabled(false);

    }//GEN-LAST:event_TENNISActionPerformed

    private void BADMINTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BADMINTONActionPerformed
        fillComboBadminton();
        fillComboDates(guestLoggedIn.getGuest_id());
        SHOWTIMEANDDATE.setVisible(true);
        BOOKFACILITY.setVisible(false);
        initializeTableTimes();
        facilityID = 10;
        ButtonModel model2 = InstructorCheckbox.getModel();
        model2.setSelected(false);
        model2.setEnabled(true);
        SHOWTIMEDATEBOOKBUTTON.setEnabled(false);
    }//GEN-LAST:event_BADMINTONActionPerformed

    private void VOLLEYBALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VOLLEYBALLActionPerformed
        fillComboVolleyball();
        fillComboDates(guestLoggedIn.getGuest_id());
        SHOWTIMEANDDATE.setVisible(true);
        BOOKFACILITY.setVisible(false);
        initializeTableTimes();
        facilityID = 7;
        ButtonModel model2 = InstructorCheckbox.getModel();
        model2.setSelected(false);
        model2.setEnabled(false);
        SHOWTIMEDATEBOOKBUTTON.setEnabled(false);
    }//GEN-LAST:event_VOLLEYBALLActionPerformed

    private void GUESTLOGINActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_GUESTLOGINActionPerformed
    {//GEN-HEADEREND:event_GUESTLOGINActionPerformed
        String username = GUESTUSERNAME.getText();
        String password = GUESTPASSWORD.getText();
        Guest g = con.checkLogin(username, password);
        if (g != null)
        {
            guestLoggedIn = g;
            // clear password in guest in gui for safety reasons
            g.setPassword("");
            g.setUsername("");
            WELCOME.setVisible(true);
            LOGIN.setVisible(false);
            GUESTUSERNAME.setText("");
            GUESTPASSWORD.setText("");
            GUESTFEEDBACK.setText("");
        } else
        {
            GUESTFEEDBACK.setText("Wrong username or password!");
            GUESTPASSWORD.setText("");
            GUESTUSERNAME.requestFocusInWindow();
            GUESTUSERNAME.selectAll();
        }
    }//GEN-LAST:event_GUESTLOGINActionPerformed

    private void GUESTPASSWORDActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_GUESTPASSWORDActionPerformed
    {//GEN-HEADEREND:event_GUESTPASSWORDActionPerformed

    }//GEN-LAST:event_GUESTPASSWORDActionPerformed

    private void DELETEBOOKINGBACKBUTTONActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DELETEBOOKINGBACKBUTTONActionPerformed
    {//GEN-HEADEREND:event_DELETEBOOKINGBACKBUTTONActionPerformed
        WELCOME.setVisible(true);
        DELETEBOOKING.setVisible(false);
    }//GEN-LAST:event_DELETEBOOKINGBACKBUTTONActionPerformed

    private void SHOWTIMESearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SHOWTIMESearchActionPerformed
    {//GEN-HEADEREND:event_SHOWTIMESearchActionPerformed
        fillTableTimes();
        String datestr = SHOWDATECOMBOBOX.getSelectedItem().toString() + " " + Calendar.getInstance().get(Calendar.YEAR);
        int court = Integer.parseInt(CHOOSECOURTCOMBO.getSelectedItem().toString());

        DateFormat originalFormat = new SimpleDateFormat("EEE MMM dd yyyy", Locale.ENGLISH);
        DateFormat targetFormat = new SimpleDateFormat("dd-MM-yy");
        Date date = null;
        try
        {
            date = originalFormat.parse(datestr);
        } catch (ParseException ex)
        {
            ex.printStackTrace();
        }
        String formattedDate = targetFormat.format(date);

        // if box is unchecked run this anyway to get rid of dates that are taken
        ButtonModel model2 = InstructorCheckbox.getModel();

        ArrayList<String> nonfree = con.getNonFreeDates(formattedDate, facilityID + court - 1);

        DefaultTableModel model = (DefaultTableModel) BookTable.getModel();
        for (String nonfree1 : nonfree)
        {
            for (int j = 0; j < model.getRowCount(); j++)
            {
                String nonfreedate = nonfree1;
                String modeldate = model.getValueAt(j, 0).toString();

                if (modeldate.startsWith(nonfreedate))
                {
                    model.removeRow(j);
                }
            }
        }

        if (model2.isSelected())
        {
            int amount = CHOOSECOURTCOMBO.getItemCount();

            for (int i = 0; i < amount; i++)
            {
                ArrayList<String> nonfreeins = con.getNonFreeDatesIns(formattedDate, facilityID + i);
                for (String nonfree2 : nonfreeins)
                {
                    for (int j = 0; j < model.getRowCount(); j++)
                    {
                        String nonfreedate = nonfree2;
                        String modeldate = model.getValueAt(j, 0).toString();
                        if (modeldate.startsWith(nonfreedate))
                        {
                            model.removeRow(j);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_SHOWTIMESearchActionPerformed

    private void SHOWTIMEDATEBOOKBUTTONActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SHOWTIMEDATEBOOKBUTTONActionPerformed
    {//GEN-HEADEREND:event_SHOWTIMEDATEBOOKBUTTONActionPerformed
        DefaultTableModel model = (DefaultTableModel) BookTable.getModel();
        int court = Integer.parseInt(CHOOSECOURTCOMBO.getSelectedItem().toString());
        int FID = facilityID + court - 1;

        String datestr = SHOWDATECOMBOBOX.getSelectedItem().toString() + " " + Calendar.getInstance().get(Calendar.YEAR);
        DateFormat originalFormat = new SimpleDateFormat("EEE MMM dd yyyy", Locale.ENGLISH);
        DateFormat targetFormat = new SimpleDateFormat("dd-MM-yy");
        Date date = null;
        try
        {
            date = originalFormat.parse(datestr);
        } catch (ParseException ex)
        {
            ex.printStackTrace();
        }
        String formattedDate = targetFormat.format(date);

        String times = model.getValueAt(BookTable.getSelectedRow(), 0).toString();
        String sdate = formattedDate + " " + times.substring(0, 5);
        String edate = formattedDate + " " + times.substring(8, 13);
        String todate = new SimpleDateFormat("dd-MM-yy HH:mm").format(new Date());

        ButtonModel model2 = InstructorCheckbox.getModel();
        if (model2.isSelected())
        {
            String facility = "";
            switch (facilityID)
            {
                case 1:
                    facility = "Tennis";
                    break;
                case 9:
                    facility = "Golf";
                    break;
                case 10:
                    facility = "Badminton";
                    break;
                case 14:
                    facility = "Swimming";
                    break;
            }
            // get name for facility, use it for getting instructorID
            Instructor i = con.getInstructor(facility);
            Facility_Booking fb = con.saveNewFBooking(FID, i.getID(), sdate, edate, todate);
            if (fb != null)
            {
                Fbooking_Guests fbg = con.saveNewFbooking_Guests(guestLoggedIn.getGuest_id());
                if (fbg != null)
                {
                    YOUARENOWBOOKEDIN.setVisible(true);
                    SHOWTIMEANDDATE.setVisible(false);
                }
            }
        } else
        {
            Facility_Booking fb = con.saveNewFBooking(FID, 0, sdate, edate, todate);
            if (fb != null)
            {
                Fbooking_Guests fbg = con.saveNewFbooking_Guests(guestLoggedIn.getGuest_id());
                if (fbg != null)
                {
                    YOUARENOWBOOKEDIN.setVisible(true);
                    SHOWTIMEANDDATE.setVisible(false);
                }
            }
        }
    }//GEN-LAST:event_SHOWTIMEDATEBOOKBUTTONActionPerformed

    private void THANKYOUBUTTONActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_THANKYOUBUTTONActionPerformed
    {//GEN-HEADEREND:event_THANKYOUBUTTONActionPerformed
        WELCOME.setVisible(true);
        YOUARENOWBOOKEDIN.setVisible(false);
    }//GEN-LAST:event_THANKYOUBUTTONActionPerformed

    private void SHOWTIMEBACKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SHOWTIMEBACKActionPerformed
    {//GEN-HEADEREND:event_SHOWTIMEBACKActionPerformed
        BOOKFACILITY.setVisible(true);
        SHOWTIMEANDDATE.setVisible(false);
    }//GEN-LAST:event_SHOWTIMEBACKActionPerformed

    private void DELETEBOOKINGBUTTONActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DELETEBOOKINGBUTTONActionPerformed
    {//GEN-HEADEREND:event_DELETEBOOKINGBUTTONActionPerformed
        // DELETE KNAPPEN
        // DET ER HER EN BOOKING SLETTES!
        String start_date = CheckBookingsTable.getValueAt(CheckBookingsTable.getSelectedRow(), 2).toString();
        int courtno = Integer.parseInt(CheckBookingsTable.getValueAt(CheckBookingsTable.getSelectedRow(), 1).toString());
        String facility = CheckBookingsTable.getValueAt(CheckBookingsTable.getSelectedRow(), 0).toString();

        int i;
        switch (facility)
        {
            case "Tennis":
                i = 1;
                break;
            case "Badminton":
                i = 10;
                break;
            case "Fitness":
                i = 15;
                break;
            case "Volleyball":
                i = 7;
                break;
            case "Golf":
                i = 9;
                break;
            case "Swimming":
                i = 14;
                break;
            case "Handball":
                i = 16;
                break;
            default:
                i = 0;
                break;
        }

        int FID = courtno + i - 1;
        boolean status = con.deleteFBooking(start_date, FID);

        if (!status)
        {
            Deletebookingfeedback.setText("Failed delete booking");
        } else
        {
            Deletebookingfeedback.setText("Succesfully deleted your booking!");
            DefaultTableModel model = (DefaultTableModel) CheckBookingsTable.getModel();
            model.removeRow(CheckBookingsTable.getSelectedRow());
        }
    }//GEN-LAST:event_DELETEBOOKINGBUTTONActionPerformed

    private void InstructorCheckboxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_InstructorCheckboxActionPerformed
    {//GEN-HEADEREND:event_InstructorCheckboxActionPerformed
        DefaultTableModel model = (DefaultTableModel)BookTable.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--)
        {
            model.removeRow(i);
            
        }
    }//GEN-LAST:event_InstructorCheckboxActionPerformed

    private void CHOOSECOURTCOMBOActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CHOOSECOURTCOMBOActionPerformed
    {//GEN-HEADEREND:event_CHOOSECOURTCOMBOActionPerformed
        DefaultTableModel model = (DefaultTableModel)BookTable.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--)
        {
            model.removeRow(i);
            
        }
    }//GEN-LAST:event_CHOOSECOURTCOMBOActionPerformed

    private void SHOWDATECOMBOBOXActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SHOWDATECOMBOBOXActionPerformed
    {//GEN-HEADEREND:event_SHOWDATECOMBOBOXActionPerformed
        DefaultTableModel model = (DefaultTableModel)BookTable.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--)
        {
            model.removeRow(i);
            
        }
    }//GEN-LAST:event_SHOWDATECOMBOBOXActionPerformed

    private void fillComboDates(int gID)
    {
        SHOWDATECOMBOBOX.removeAllItems();
        ArrayList<GuestDates> gd = con.getGuestDates(gID);
        String sdate = gd.get(0).getStart_date();
        String edate = gd.get(0).getEnd_date();
        SimpleDateFormat myFormat = new SimpleDateFormat("MMM. dd", Locale.ENGLISH);
        try
        {
            Date fromDate = myFormat.parse(sdate);
            Date toDate = myFormat.parse(edate);
            Calendar cal = Calendar.getInstance();
            cal.setTime(fromDate);
            String start = cal.getTime().toString();
            String d = start.substring(0, 10);
            SHOWDATECOMBOBOX.addItem(d);
            while (cal.getTime().before(toDate))
            {
                cal.add(Calendar.DATE, 1);
                String dates = cal.getTime().toString();
                String d2 = dates.substring(0, 10);
                SHOWDATECOMBOBOX.addItem(d2);
            }
        } catch (ParseException pe)
        {
            pe.printStackTrace();
        }
    }

    private void initializeTableTimes()
    {
        BookTable.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) BookTable.getModel();
        BookTable.setAutoCreateRowSorter(true);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        BookTable.setRowSorter(sorter);
        model.addColumn("Times");
        model.setRowCount(12);
    }

    private void fillTableTimes()
    {
        BookTable.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) BookTable.getModel();
        BookTable.setAutoCreateRowSorter(true);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        BookTable.setRowSorter(sorter);
        model.addColumn("Times");
        model.setRowCount(12);

        model.setValueAt("08:00 - 09:00", 0, 0);
        model.setValueAt("09:00 - 10:00", 1, 0);
        model.setValueAt("10:00 - 11:00", 2, 0);
        model.setValueAt("11:00 - 12:00", 3, 0);
        model.setValueAt("12:00 - 13:00", 4, 0);
        model.setValueAt("13:00 - 14:00", 5, 0);
        model.setValueAt("14:00 - 15:00", 6, 0);
        model.setValueAt("15:00 - 16:00", 7, 0);
        model.setValueAt("16:00 - 17:00", 8, 0);
        model.setValueAt("17:00 - 18:00", 9, 0);
        model.setValueAt("18:00 - 19:00", 10, 0);
        model.setValueAt("19:00 - 20:00", 11, 0);
    }

    private void fillComboTennis()
    {
        CHOOSECOURTCOMBO.removeAllItems();
        CHOOSECOURTCOMBO.addItem("1");
        CHOOSECOURTCOMBO.addItem("2");
        CHOOSECOURTCOMBO.addItem("3");
        CHOOSECOURTCOMBO.addItem("4");
        CHOOSECOURTCOMBO.addItem("5");
        CHOOSECOURTCOMBO.addItem("6");
    }

    private void fillComboVolleyball()
    {
        CHOOSECOURTCOMBO.removeAllItems();
        CHOOSECOURTCOMBO.addItem("1");
        CHOOSECOURTCOMBO.addItem("2");
    }

    private void fillComboHandball()
    {
        CHOOSECOURTCOMBO.removeAllItems();
        CHOOSECOURTCOMBO.addItem("1");
        CHOOSECOURTCOMBO.addItem("2");
    }

    private void fillComboBadminton()
    {
        CHOOSECOURTCOMBO.removeAllItems();
        CHOOSECOURTCOMBO.addItem("1");
        CHOOSECOURTCOMBO.addItem("2");
        CHOOSECOURTCOMBO.addItem("3");
        CHOOSECOURTCOMBO.addItem("4");
    }

    private void fillComboGolf()
    {
        CHOOSECOURTCOMBO.removeAllItems();
        CHOOSECOURTCOMBO.addItem("1");
    }

    private void fillComboSwimming()
    {
        CHOOSECOURTCOMBO.removeAllItems();
        CHOOSECOURTCOMBO.addItem("1");
    }

    private void fillComboFitness()
    {
        CHOOSECOURTCOMBO.removeAllItems();
        CHOOSECOURTCOMBO.addItem("1");
    }

    private void fillBookings(ArrayList<Fbooking> fb)
    {
        CheckBookingsTable.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) CheckBookingsTable.getModel();
        CheckBookingsTable.setAutoCreateRowSorter(true);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        CheckBookingsTable.setRowSorter(sorter);
        model.addColumn("Facility");
        model.addColumn("Court #");
        model.addColumn("Start time");
        model.addColumn("End time");
        model.setRowCount(fb.size());

        CheckBookingsTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        CheckBookingsTable.getColumnModel().getColumn(1).setPreferredWidth(20);

        for (int i = 0; i < fb.size(); i++)
        {
            model.setValueAt(fb.get(i).getName(), i, 0);
            model.setValueAt(fb.get(i).getCourtno(), i, 1);
            model.setValueAt(fb.get(i).getStart_date(), i, 2);
            model.setValueAt(fb.get(i).getEnd_date(), i, 3);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GuestBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GuestBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GuestBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GuestBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GuestBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BADMINTON;
    private javax.swing.JPanel BOOKFACILITY;
    private javax.swing.JButton BOOKFACILITYBACKBUTTON;
    private javax.swing.JButton BOOKFACILITYBUTTON;
    private javax.swing.JTable BookTable;
    private javax.swing.JButton CHECKBOOKINGBUTTON;
    private javax.swing.JComboBox CHOOSECOURTCOMBO;
    private javax.swing.JTable CheckBookingsTable;
    private javax.swing.JPanel DELETEBOOKING;
    private javax.swing.JButton DELETEBOOKINGBACKBUTTON;
    private javax.swing.JButton DELETEBOOKINGBUTTON;
    private javax.swing.JLabel Deletebookingfeedback;
    private javax.swing.JButton FITNESS;
    private javax.swing.JButton GOLF;
    private javax.swing.JLabel GUESTFEEDBACK;
    private javax.swing.JButton GUESTLOGIN;
    private javax.swing.JPasswordField GUESTPASSWORD;
    private javax.swing.JTextField GUESTUSERNAME;
    private javax.swing.JButton HANDBALL;
    private javax.swing.JCheckBox InstructorCheckbox;
    private javax.swing.JPanel LOGIN;
    private javax.swing.JButton LOGOUTBUTTON;
    private javax.swing.JComboBox SHOWDATECOMBOBOX;
    private javax.swing.JPanel SHOWTIMEANDDATE;
    private javax.swing.JButton SHOWTIMEBACK;
    private javax.swing.JButton SHOWTIMEDATEBOOKBUTTON;
    private javax.swing.JButton SHOWTIMESearch;
    private javax.swing.JButton SWIMMING;
    private javax.swing.JButton TENNIS;
    private javax.swing.JButton THANKYOUBUTTON;
    private javax.swing.JButton VOLLEYBALL;
    private javax.swing.JPanel WELCOME;
    private javax.swing.JPanel YOUARENOWBOOKEDIN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
